/*
  Script upload/n√©n/x√≥a ·∫£nh - Phi√™n b·∫£n t·ªëi ∆∞u
  Y√™u c·∫ßu: jQuery (ƒë√£ c√≥ trong project)
  Thay apiUrl t∆∞∆°ng ·ª©ng v·ªõi endpoint server c·ªßa b·∫°n.
*/

const apiUrl = '../../includes/mc/mc_form_image.php';
const MAX_WIDTH = 1200;
const MAX_HEIGHT = 1200;
const QUALITY = 0.8;

let uploadedPublicId = null;   // public_id tr·∫£ v·ªÅ t·ª´ server (n·∫øu c√≥)
let isProcessing = false;      // lock ƒë·ªÉ tr√°nh nhi·ªÅu request c√πng l√∫c

// ---------- H·ªñ TR·ª¢ UI ----------
function setStatus(text = '', color = '#333') {
  $('#statusMsg').css('color', color).html(text);
}

function setProcessing(on) {
  isProcessing = on;
  $('#mc_clear_image').prop('disabled', on);
  $('#mc_image').prop('disabled', on);
}

function updateNoImageText() {
  const hasImage = Boolean($('#mc_preview_image').attr('src'));
  $('#noImageText').toggle(!hasImage);
}

function resetPreview() {
  $('#mc_preview_image').attr('src', '').hide();
  $('#mc_image').val('');
  uploadedPublicId = null;
  setStatus('');
  updateNoImageText();
}

// ---------- L·∫§Y public_id T·ª™ URL (d·ª± ph√≤ng) ----------
function getPublicIdFromUrl(url) {
  // D·ª± ph√≤ng: n·∫øu server kh√¥ng tr·∫£ public_id, c·ªë parse t·ª´ URL cloudinary
  try {
    const u = new URL(url, location.origin);
    const parts = u.pathname.split('/').filter(Boolean);
    const uploadIdx = parts.indexOf('upload');
    if (uploadIdx === -1) return null;
    let tail = parts.slice(uploadIdx + 1); // ph·∫ßn sau 'upload'
    // B·ªè bi·∫øn th·ªÉ/transforms (ch·ª©a d·∫•u ph·∫©y) n·∫øu c√≥
    if (tail.length && tail[0].includes(',')) tail.shift();
    // B·ªè version n·∫øu c√≥ v12345
    if (tail.length && /^v\d+$/.test(tail[0])) tail.shift();
    if (!tail.length) return null;
    const filename = tail.pop();
    if (!filename.includes('.')) return tail.join('/');
    const nameWithoutExt = filename.substring(0, filename.lastIndexOf('.'));
    return [...tail, nameWithoutExt].join('/');
  } catch (e) {
    return null;
  }
}

// ---------- N√âN ·∫¢NH (tr·∫£ v·ªÅ Promise<Blob>) ----------
function compressImage(file) {
  return new Promise((resolve, reject) => {
    const reader = new FileReader();
    reader.onerror = () => reject(new Error('FileReader error'));
    reader.onload = () => {
      const img = new Image();
      img.onerror = () => reject(new Error('Image load error'));
      img.onload = () => {
        let width = img.width;
        let height = img.height;

        // Gi·ªØ t·ªâ l·ªá
        if (width > MAX_WIDTH || height > MAX_HEIGHT) {
          if (width / height > MAX_WIDTH / MAX_HEIGHT) {
            height = Math.round(height * (MAX_WIDTH / width));
            width = MAX_WIDTH;
          } else {
            width = Math.round(width * (MAX_HEIGHT / height));
            height = MAX_HEIGHT;
          }
        }

        const canvas = document.createElement('canvas');
        canvas.width = width;
        canvas.height = height;
        const ctx = canvas.getContext('2d');
        ctx.drawImage(img, 0, 0, width, height);

        // canvas.toBlob l√† kh√¥ng ƒë·ªìng b·ªô; b·ªçc trong Promise
        canvas.toBlob(blob => {
          if (blob && blob.size > 0) resolve(blob);
          else reject(new Error('Failed to compress'));
        }, 'image/jpeg', QUALITY);
      };
      img.src = reader.result;
    };
    reader.readAsDataURL(file);
  });
}

// ---------- UPLOAD (fetch v·ªõi FormData) ----------
async function uploadBlob(blob, filename) {
  const fd = new FormData();
  fd.append('action', 'upload');
  // server mong mu·ªën t√™n file c√≥ ext .jpg sau khi chuy·ªÉn sang jpeg
  fd.append('file', blob, filename.replace(/\.[^/.]+$/, '.jpg'));

  // d√πng fetch ƒë·ªÉ d·ªÖ await, nh∆∞ng tr·∫£ v·ªÅ JSON gi·ªëng v·ªõi $.ajax
  const resp = await fetch(apiUrl, {
    method: 'POST',
    body: fd,
    credentials: 'same-origin'
  });

  if (!resp.ok) {
    const text = await resp.text().catch(() => '');
    throw new Error('HTTP ' + resp.status + ' ' + text);
  }
  const json = await resp.json().catch(() => null);
  if (!json) throw new Error('Invalid JSON response');
  return json;
}

// ---------- DELETE ----------
async function deleteByPublicId(public_id) {
  const fd = new FormData();
  fd.append('action', 'delete');
  fd.append('public_id', public_id);

  const resp = await fetch(apiUrl, {
    method: 'POST',
    body: fd,
    credentials: 'same-origin'
  });
  if (!resp.ok) {
    const text = await resp.text().catch(() => '');
    throw new Error('HTTP ' + resp.status + ' ' + text);
  }
  const json = await resp.json().catch(() => null);
  if (!json) throw new Error('Invalid JSON response');
  return json;
}

// ---------- EVENT: ch·ªçn file (upload) ----------
$(document).on('change', '#mc_image', async function () {
  const file = this.files && this.files[0];
  if (!file) return;

  if (isProcessing) return;
  setProcessing(true);
  setStatus('‚è≥ N√©n ·∫£nh...', '#333');

  try {
    // N·∫øu ƒë√£ c√≥ ·∫£nh ƒë√£ upload tr∆∞·ªõc ƒë√≥, t·ª± ƒë·ªông h·ªèi x√≥a hay gi·ªØ
    if (uploadedPublicId) {
      const keep = confirm('B·∫°n ƒë√£ upload m·ªôt ·∫£nh tr∆∞·ªõc ƒë√≥. B·∫°n mu·ªën x√≥a ·∫£nh c≈© tr∆∞·ªõc khi thay ·∫£nh m·ªõi? (OK = x√≥a c≈©)');
      if (keep) {
        setStatus('‚è≥ ƒêang x√≥a ·∫£nh c≈©...', '#333');
        const delRes = await deleteByPublicId(uploadedPublicId);
        if (delRes.result === 'ok') {
          resetPreview();
          setStatus('üóë ·∫¢nh c≈© ƒë√£ x√≥a. Ti·∫øp t·ª•c upload m·ªõi...', 'green');
        } else {
          // n·∫øu x√≥a th·∫•t b·∫°i th√¨ ng∆∞ng upload ƒë·ªÉ tr√°nh r√°c
          setStatus('‚ùå Kh√¥ng th·ªÉ x√≥a ·∫£nh c≈© ‚Äî h·ªßy upload m·ªõi.', 'red');
          setProcessing(false);
          return;
        }
      } else {
        // ng∆∞·ªùi d√πng mu·ªën gi·ªØ c≈© -> h·ªßy h√†nh ƒë·ªông select m·ªõi
        setStatus('‚ö†Ô∏è ƒê√£ h·ªßy upload m·ªõi, gi·ªØ ·∫£nh c≈©.', '#333');
        setProcessing(false);
        return;
      }
    }

    // N√©n
    const compressedBlob = await compressImage(file);
    // Hi·ªÉn th·ªã preview t·∫°m (local)
    const previewReader = new FileReader();
    previewReader.onload = e => {
      $('#mc_preview_image').attr('src', e.target.result).show();
      updateNoImageText();
    };
    previewReader.readAsDataURL(compressedBlob);

    setStatus('‚è≥ ƒêang upload ·∫£nh...', '#333');

    // Upload
    const res = await uploadBlob(compressedBlob, file.name);

    if (res && (res.secure_url || res.url)) {
      const secureUrl = res.secure_url || res.url;
      $('#mc_preview_image').attr('src', secureUrl).show();
      // ∆∞u ti√™n server tr·∫£ public_id
      uploadedPublicId = res.public_id || getPublicIdFromUrl(secureUrl) || null;
      setStatus('‚úÖ Upload th√†nh c√¥ng!', 'green');
    } else {
      // server kh√¥ng tr·∫£ url => b√°o l·ªói
      resetPreview();
      setStatus('‚ùå Upload th·∫•t b·∫°i (server tr·∫£ v·ªÅ d·ªØ li·ªáu kh√¥ng h·ª£p l·ªá).', 'red');
    }

  } catch (err) {
    console.error(err);
    resetPreview();
    setStatus('‚ùå L·ªói: ' + (err.message || 'Kh√¥ng x√°c ƒë·ªãnh'), 'red');
  } finally {
    setProcessing(false);
  }
});

// ---------- EVENT: x√≥a ·∫£nh ----------
$(document).on('click', '#mc_clear_image', async function () {
  if (isProcessing) return;
  const currentSrc = $('#mc_preview_image').attr('src');
  if (!currentSrc && !uploadedPublicId) {
    setStatus('‚ùå Kh√¥ng c√≥ ·∫£nh ƒë·ªÉ x√≥a.', 'red');
    return;
  }

  // ∆∞u ti√™n d√πng uploadedPublicId n·∫øu c√≥
  let public_id = uploadedPublicId || getPublicIdFromUrl(currentSrc);
  if (!public_id) {
    setStatus('‚ùå Kh√¥ng th·ªÉ l·∫•y public_id ƒë·ªÉ x√≥a.', 'red');
    return;
  }

  if (!confirm('B·∫°n c√≥ ch·∫Øc mu·ªën x√≥a ·∫£nh n√†y?')) return;

  setProcessing(true);
  setStatus('‚è≥ ƒêang x√≥a ·∫£nh...', '#333');

  try {
    const res = await deleteByPublicId(public_id);
    if (res && res.result === 'ok') {
      resetPreview();
      setStatus('üóë ·∫¢nh ƒë√£ ƒë∆∞·ª£c x√≥a.', 'green');
    } else {
      setStatus('‚ùå X√≥a th·∫•t b·∫°i (server tr·∫£ v·ªÅ l·ªói).', 'red');
    }
  } catch (err) {
    console.error(err);
    setStatus('‚ùå L·ªói khi x√≥a: ' + (err.message || 'Kh√¥ng x√°c ƒë·ªãnh'), 'red');
  } finally {
    setProcessing(false);
  }
});

// ---------- INIT ----------
$(document).ready(function () {
  updateNoImageText();
  // N·∫øu b·∫°n mu·ªën kh√¥i ph·ª•c ·∫£nh ƒë√£ upload khi m·ªü page (v√≠ d·ª• edit form),
  // server c√≥ th·ªÉ g·∫Øn s·∫µn gi√° tr·ªã v√†o input hidden ho·∫∑c tag img; b·∫°n c√≥ th·ªÉ ƒë·ªçc
  // v√† populate uploadedPublicId n·∫øu server c√≤n cung c·∫•p public_id.
  // V√≠ d·ª• (n·∫øu b·∫°n c√≥ <input type="hidden" id="existing_public_id" value="...">):
  const existing = $('#existing_public_id').val();
  if (existing) uploadedPublicId = existing;
});

